#!/bin/bash
set -e

if [ ! -z "$GITPOD_WORKSPACE_ID" ]; then
    export SCHEME=https
    export LILA_DOMAIN=$(gp url 8080 | cut -c9-)
    export PICFIT_DOMAIN=$(gp url 3001 | cut -c9-)
fi

run_setup() {
    touch .env
    docker compose run --rm -it lila_docker_rs bash -c "cargo run --manifest-path /mnt/Cargo.toml"
    export $(cat .env | xargs)

    # create a placeholder directory for each of the repos
    # otherwise the directories will be created by Docker
    # when the volumes are mounted and they may be owned by root
    dirs=($(echo $DIRS | tr ',' ' '))
    for dir in "${dirs[@]}"; do
        mkdir -p repos/$(basename $dir)
    done

    repos=($(echo $REPOS | tr ',' ' '))
    echo "Cloning repos ${repos[@]}..."
    for repo in "${repos[@]}"; do
        if [[ $repo == */* ]]; then
            org="${repo%%/*}"
        else
            org="lichess-org"
        fi
        repo=$(basename $repo)
        [ ! -d repos/$repo/.git ] && git clone --depth 1 --origin upstream https://github.com/$org/$repo repos/$repo
    done

    git -C repos/lila submodule update --init

    docker compose build
    # separate build specifically for utils profile otherwise its Dockerfile changes won't be detected
    docker compose --profile utils build

    docker compose up -d

    echo "Compiling js/css..."
    docker compose run --rm ui bash -c "/lila/ui/build"

    if [ "$SETUP_DB" = "true" ]; then
        setup_database
    fi
}

run_start() {
    if [ -z "$(docker compose ps -a --services | xargs)" ]; then
        run_setup
    else
        if [ ! -z "$(docker compose ps -a --services --status=exited | xargs)" ]; then
            docker compose start
        else
            echo "There are no stopped services to resume"
        fi
    fi
}

run_stop() {
    COMPOSE_PROFILES=$(all_profiles) docker compose stop
}

run_down() {
    COMPOSE_PROFILES=$(all_profiles) docker compose down -v
}

all_profiles() {
    # return all Docker Compose profiles as a comma-separated string
    docker compose config --profiles | xargs | sed -e 's/ /,/g'
}

build_all_profiles() {
    COMPOSE_PROFILES=$(all_profiles) docker compose pull
    COMPOSE_PROFILES=$(all_profiles) docker compose build
}

setup_database() {
    # wait for mongodb to be ready
    while ! docker exec $(docker compose ps -q mongodb) mongo --eval "db.adminCommand('ping')" > /dev/null 2>&1; do
        echo "Waiting for mongodb to be ready..."
        sleep 1
    done

    echo "Adding test data..."

    docker compose run --rm mongodb bash -c \
        "mongo --host mongodb lichess /lila/bin/mongodb/indexes.js"

    docker compose run --rm python bash -c \
        "python /lila-db-seed/spamdb/spamdb.py --uri=mongodb://mongodb/lichess --password=$PASSWORD --su-password=$SU_PASSWORD --es --es-host=elasticsearch:9200"

    docker compose run --rm mongodb bash -c \
        "mongo --quiet --host mongodb lichess /scripts/mongodb/users.js"
}

run_formatter() {
    docker compose run --rm ui bash -c "\
        cd /lila && pnpm install && pnpm run format && \
        (test -f /chessground/package.json && cd /chessground && pnpm install && pnpm run format) || echo 'Skipping chessground' && \
        (test -f /pgn-viewer/package.json && cd /pgn-viewer && pnpm install && pnpm run format) || echo 'Skipping pgn-viewer'"

    docker run --rm -v $(pwd)/repos/lila:/lila \
        sbtscala/scala-sbt:eclipse-temurin-jammy-21.0.1_12_1.9.7_3.3.1 \
        bash -c "cd /lila && sbt scalafmtAll"
}

run_gitpod_welcome() {
    GREEN="\e[32m"
    BOLDGREEN="\e[1;32m"
    ENDCOLOR="\e[0m"

    echo -e "${GREEN}################${ENDCOLOR}"
    echo -e "${GREEN}Your Lichess development environment is starting!${ENDCOLOR}"
    echo -e "${GREEN}When it's ready, you can access it at:${ENDCOLOR}"
    echo -e "${BOLDGREEN} $(gp url 8080)${ENDCOLOR}"
    echo -e "${GREEN}Monitor the progress in the 'lila' container with the command:${ENDCOLOR}"
    echo -e "${BOLDGREEN} docker compose logs lila --follow${ENDCOLOR}"
    echo -e "${GREEN}For full documentation, see: https://lichess-org.github.io/lila-gitpod/${ENDCOLOR}"
}

show_help() {
    echo "Usage: $0 [start|stop|restart|down|build|format]"
}

case $1 in
    --help|-h)
        show_help
        exit 0
        ;;
    start)
        run_start
        ;;
    stop)
        run_stop
        ;;
    restart)
        run_stop && run_start
        ;;
    down)
        run_down
        ;;
    build)
        build_all_profiles
        ;;
    format)
        run_formatter
        ;;
    gitpod-welcome)
        run_gitpod_welcome
        ;;
    *)
        show_help
        exit 1
        ;;
esac
